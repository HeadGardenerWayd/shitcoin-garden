{
  "contract_name": "shitcoin-garden",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "create_fee",
      "create_fee_denom",
      "fee_recipient",
      "pool_factory_address",
      "presale_denom",
      "presale_fee_rate",
      "presale_length"
    ],
    "properties": {
      "create_fee": {
        "$ref": "#/definitions/Uint128"
      },
      "create_fee_denom": {
        "type": "string"
      },
      "fee_recipient": {
        "type": "string"
      },
      "pool_factory_address": {
        "type": "string"
      },
      "presale_denom": {
        "type": "string"
      },
      "presale_fee_rate": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "presale_length": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_shitcoin"
        ],
        "properties": {
          "create_shitcoin": {
            "type": "object",
            "required": [
              "name",
              "supply",
              "ticker"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "supply": {
                "$ref": "#/definitions/Uint128"
              },
              "ticker": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "enter_presale"
        ],
        "properties": {
          "enter_presale": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "extend_presale"
        ],
        "properties": {
          "extend_presale": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "launch_shitcoin"
        ],
        "properties": {
          "launch_shitcoin": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_shitcoin"
        ],
        "properties": {
          "claim_shitcoin": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "shitcoin_metadata"
        ],
        "properties": {
          "shitcoin_metadata": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "shitcoins"
        ],
        "properties": {
          "shitcoins": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "page": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "degen_metadata"
        ],
        "properties": {
          "degen_metadata": {
            "type": "object",
            "required": [
              "degen",
              "denom"
            ],
            "properties": {
              "degen": {
                "type": "string"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "create_fee",
        "create_fee_denom",
        "fee_recipient",
        "pool_factory_address",
        "presale_denom",
        "presale_fee_rate",
        "presale_length"
      ],
      "properties": {
        "create_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "create_fee_denom": {
          "type": "string"
        },
        "fee_recipient": {
          "type": "string"
        },
        "pool_factory_address": {
          "type": "string"
        },
        "presale_denom": {
          "type": "string"
        },
        "presale_fee_rate": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "presale_length": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "degen_metadata": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DegenMetadata",
      "type": "object",
      "required": [
        "presale_submission",
        "shitcoins_claimed"
      ],
      "properties": {
        "presale_submission": {
          "$ref": "#/definitions/Uint128"
        },
        "shitcoins_claimed": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "shitcoin_metadata": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShitcoinMetadata",
      "type": "object",
      "required": [
        "creator",
        "denom",
        "launched",
        "presale_end",
        "presale_raise",
        "supply"
      ],
      "properties": {
        "creator": {
          "type": "string"
        },
        "denom": {
          "type": "string"
        },
        "launched": {
          "type": "boolean"
        },
        "presale_end": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "presale_raise": {
          "$ref": "#/definitions/Uint128"
        },
        "supply": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "shitcoins": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShitcoinPage",
      "type": "object",
      "required": [
        "limit",
        "page",
        "shitcoins",
        "total"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "page": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "shitcoins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShitcoinMetadata"
          }
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ShitcoinMetadata": {
          "type": "object",
          "required": [
            "creator",
            "denom",
            "launched",
            "presale_end",
            "presale_raise",
            "supply"
          ],
          "properties": {
            "creator": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "launched": {
              "type": "boolean"
            },
            "presale_end": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "presale_raise": {
              "$ref": "#/definitions/Uint128"
            },
            "supply": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
